
DECLARE
    quest_record RECORD;
    progress_increment DECIMAL := 0;
    current_progress DECIMAL;
    target_value DECIMAL;
    today_date DATE := CURRENT_DATE;
    total_daily_winnings DECIMAL := 0;
    unique_games_played INTEGER := 0;
BEGIN
    -- Log the activity first
    INSERT INTO user_activities (user_id, activity_type, activity_value, game_type, metadata)
    VALUES (p_user_id, p_activity_type, p_activity_value, p_game_type, p_metadata);

    -- Process each active quest for the user
    FOR quest_record IN (
        SELECT dq.id, dq.progress, dq.is_completed, qd.task_type, qd.target_value, qd.difficulty_tier
        FROM daily_quests dq
        JOIN quest_definitions qd ON dq.quest_definition_id = qd.id
        WHERE dq.user_id = p_user_id 
        AND dq.date = today_date
        AND dq.is_completed = FALSE
    ) LOOP
        progress_increment := 0;
        current_progress := quest_record.progress;
        
        CASE quest_record.task_type
            -- Play any casino game once
            WHEN 'play_game' THEN
                IF p_activity_type = 'play_game' THEN
                    progress_increment := 1;
                END IF;
            
            -- Win games count
            WHEN 'win_games' THEN
                IF p_activity_type = 'win_game' THEN
                    progress_increment := 1;
                END IF;
            
            -- Total bets placed
            WHEN 'total_bets' THEN
                IF p_activity_type = 'place_bet' THEN
                    progress_increment := p_activity_value;
                END IF;
            
            -- Daily winnings (accumulated)
            WHEN 'daily_winnings' THEN
                IF p_activity_type = 'win_game' THEN
                    -- Calculate total winnings for today
                    SELECT COALESCE(SUM(activity_value), 0) INTO total_daily_winnings
                    FROM user_activities
                    WHERE user_id = p_user_id
                    AND activity_type = 'win_game'
                    AND DATE(created_at) = today_date;
                    
                    -- Set current progress to total accumulated winnings
                    current_progress := total_daily_winnings;
                    progress_increment := current_progress - quest_record.progress;
                END IF;
            
            -- Different games played
            WHEN 'different_games' THEN
                IF p_activity_type = 'play_game' THEN
                    -- Count unique games played today
                    SELECT COUNT(DISTINCT game_type) INTO unique_games_played
                    FROM user_activities
                    WHERE user_id = p_user_id
                    AND activity_type = 'play_game'
                    AND DATE(created_at) = today_date
                    AND game_type IS NOT NULL;
                    
                    current_progress := unique_games_played;
                    progress_increment := current_progress - quest_record.progress;
                END IF;
            
            ELSE
                -- Handle other quest types as before
                progress_increment := 0;
        END CASE;
        
        -- Update quest progress if there's any change
        IF progress_increment != 0 OR current_progress != quest_record.progress THEN
            target_value := quest_record.target_value;
            
            -- Ensure progress doesn't exceed target
            IF current_progress >= target_value THEN
                current_progress := target_value;
                
                UPDATE daily_quests
                SET progress = current_progress, is_completed = TRUE, updated_at = NOW()
                WHERE id = quest_record.id;
                
                -- Track quest completion
                INSERT INTO user_activities (user_id, activity_type, activity_value, metadata)
                VALUES (p_user_id, 'complete_quest', 1, jsonb_build_object('quest_id', quest_record.id));
                
            ELSE
                UPDATE daily_quests
                SET progress = current_progress, updated_at = NOW()
                WHERE id = quest_record.id;
            END IF;
        END IF;
    END LOOP;
    
    -- Check balance-based quests
    PERFORM check_balance_quests(p_user_id);
END;
