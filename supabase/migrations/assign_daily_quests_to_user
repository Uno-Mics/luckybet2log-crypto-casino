
DECLARE
  easy_quest_id UUID;
  medium_quest_id UUID;
  hard_quest_id UUID;
  assigned_count INTEGER := 0;
BEGIN
  -- Check if user already has quests for today
  SELECT COUNT(*) INTO assigned_count
  FROM user_daily_quest_assignments
  WHERE user_id = p_user_id AND assigned_date = CURRENT_DATE;
  
  -- Only assign if no quests exist for today
  IF assigned_count = 0 THEN
    -- Get one random quest from each difficulty
    SELECT id INTO easy_quest_id
    FROM daily_quests 
    WHERE is_active = true AND difficulty = 'easy' 
    ORDER BY RANDOM() LIMIT 1;
    
    SELECT id INTO medium_quest_id
    FROM daily_quests 
    WHERE is_active = true AND difficulty = 'medium' 
    ORDER BY RANDOM() LIMIT 1;
    
    SELECT id INTO hard_quest_id
    FROM daily_quests 
    WHERE is_active = true AND difficulty = 'hard' 
    ORDER BY RANDOM() LIMIT 1;
    
    -- Insert the assignments
    IF easy_quest_id IS NOT NULL THEN
      INSERT INTO user_daily_quest_assignments (user_id, quest_id, assigned_date)
      VALUES (p_user_id, easy_quest_id, CURRENT_DATE)
      ON CONFLICT (user_id, quest_id, assigned_date) DO NOTHING;
    END IF;
    
    IF medium_quest_id IS NOT NULL THEN
      INSERT INTO user_daily_quest_assignments (user_id, quest_id, assigned_date)
      VALUES (p_user_id, medium_quest_id, CURRENT_DATE)
      ON CONFLICT (user_id, quest_id, assigned_date) DO NOTHING;
    END IF;
    
    IF hard_quest_id IS NOT NULL THEN
      INSERT INTO user_daily_quest_assignments (user_id, quest_id, assigned_date)
      VALUES (p_user_id, hard_quest_id, CURRENT_DATE)
      ON CONFLICT (user_id, quest_id, assigned_date) DO NOTHING;
    END IF;
  END IF;
END;
